name: Build and Push Docker Image

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'Dockerfile'
      - 'requirements.txt'
      - '.github/workflows/build-and-push.yml'
  pull_request:
    branches:
      - main
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag'
        required: false
        default: 'latest'
      dockerfile:
        description: 'Dockerfile to use (Dockerfile or Dockerfile.simple)'
        required: false
        default: 'Dockerfile.simple'
        type: choice
        options:
          - Dockerfile.simple
          - Dockerfile

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/qwen3-vl-runpod

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          echo "Disk space before cleanup:"
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune -a -f
          sudo apt-get clean
          echo "Disk space after cleanup:"
          df -h

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set Dockerfile
        id: dockerfile
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "dockerfile=${{ github.event.inputs.dockerfile }}" >> $GITHUB_OUTPUT
          else
            echo "dockerfile=Dockerfile.simple" >> $GITHUB_OUTPUT
          fi
          echo "Using Dockerfile: $(cat $GITHUB_OUTPUT | grep dockerfile | cut -d'=' -f2)"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ steps.dockerfile.outputs.dockerfile }}
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          secrets: |
            "HF_TOKEN=${{ secrets.HF_TOKEN }}"

      - name: Image digest
        run: echo ${{ steps.build.outputs.digest }}

      - name: Update deployment status
        if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "✅ Successfully built and pushed Docker image"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          echo ""
          echo "To deploy on RunPod:"
          echo "1. Go to RunPod Serverless > My Endpoints"
          echo "2. Create new endpoint or update existing"
          echo "3. Use image: ${{ env.IMAGE_NAME }}:latest"
          echo "4. Set environment variables as needed"

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ Docker image built successfully!\n\nImage: `${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }}`'
            })
